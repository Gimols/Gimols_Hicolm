

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.io.File;
import java.util.Enumeration;
import java.util.Vector;

import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.event.TreeModelEvent;
import javax.swing.event.TreeModelListener;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author joaovitor
 */
public class testee extends javax.swing.JFrame {

    /**
     * Creates new form testee
     */
    public testee() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        FileSystemModel fileSystemDataModel = new FileSystemModel();
        jTree1 = new JTree(fileSystemDataModel);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(jTree1);
        class FileSystemModel implements TreeModel {
            private String root;

            private Vector listeners;

            public FileSystemModel() {

                root = System.getProperty("user.home");
                File tempFile = new File(root);
                root = tempFile.getParent();

                listeners = new Vector();
            }

            public Object getRoot() {
                return (new File(root));
            }

            public Object getChild(Object parent, int index) {
                File directory = (File) parent;
                String[] directoryMembers = directory.list();
                return (new File(directory, directoryMembers[index]));
            }

            public int getChildCount(Object parent) {
                File fileSystemMember = (File) parent;
                if (fileSystemMember.isDirectory()) {
                    String[] directoryMembers = fileSystemMember.list();
                    return directoryMembers.length;
                }

                else {

                    return 0;
                }
            }

            public int getIndexOfChild(Object parent, Object child) {
                File directory = (File) parent;
                File directoryMember = (File) child;
                String[] directoryMemberNames = directory.list();
                int result = -1;

                for (int i = 0; i < directoryMemberNames.length; ++i) {
                    if (directoryMember.getName().equals(directoryMemberNames[i])) {
                        result = i;
                        break;
                    }
                }

                return result;
            }

            public boolean isLeaf(Object node) {
                return ((File) node).isFile();
            }

            public void addTreeModelListener(TreeModelListener l) {
                if (l != null && !listeners.contains(l)) {
                    listeners.addElement(l);
                }
            }

            public void removeTreeModelListener(TreeModelListener l) {
                if (l != null) {
                    listeners.removeElement(l);
                }
            }

            public void valueForPathChanged(TreePath path, Object newValue) {

            }

            public void fireTreeNodesInserted(TreeModelEvent e) {
                Enumeration listenerCount = listeners.elements();
                while (listenerCount.hasMoreElements()) {
                    TreeModelListener listener = (TreeModelListener) listenerCount.nextElement();
                    listener.treeNodesInserted(e);
                }
            }

            public void fireTreeNodesRemoved(TreeModelEvent e) {
                Enumeration listenerCount = listeners.elements();
                while (listenerCount.hasMoreElements()) {
                    TreeModelListener listener = (TreeModelListener) listenerCount.nextElement();
                    listener.treeNodesRemoved(e);
                }

            }

            public void fireTreeNodesChanged(TreeModelEvent e) {
                Enumeration listenerCount = listeners.elements();
                while (listenerCount.hasMoreElements()) {
                    TreeModelListener listener = (TreeModelListener) listenerCount.nextElement();
                    listener.treeNodesChanged(e);
                }

            }

            public void fireTreeStructureChanged(TreeModelEvent e) {
                Enumeration listenerCount = listeners.elements();
                while (listenerCount.hasMoreElements()) {
                    TreeModelListener listener = (TreeModelListener) listenerCount.nextElement();
                    listener.treeStructureChanged(e);
                }

            }
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 245, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        FileSystemModel fileSystemDataModel = new FileSystemModel();
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(testee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(testee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(testee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(testee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new testee().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private volatile javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}